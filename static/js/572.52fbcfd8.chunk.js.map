{"version":3,"file":"static/js/572.52fbcfd8.chunk.js","mappings":"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","sources":["pages/Phonebook.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selectors.js","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/PhoneForm/PhoneForm.styled.jsx","components/PhoneForm/PhoneForm.jsx","pages/Phonebook.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const PhonebookSection = styled.section`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  gap: 50px;\n  flex-wrap: nowrap;\n  justify-content: center;\n  padding: 50px;\n`;\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  gap: 30px;\n  padding: 20px;\n border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(2px);\n  &:hover,\n  &:focus {\n    box-shadow: 1px 1px 10px 10px #696969;\n  }\n  flex-direction: column;\n  align-items: center;\n  width: 450px;\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilteredContacts = state => state.filter;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilteredContacts],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const ListOfContact = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  font-size: 20px;\n`;\n\nexport const Items = styled.li`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n  > div {\n    display: flex;\n    gap: 10px;\n  }\n  > input {\n    background-color: transparent;\n    border: none;\n    border-bottom: 1px solid black;\n    outline: none;\n  }\n`;\nexport const ItemButton = styled.button`\n \n  display: flex;\n  align-items: center;\n\n \n  \n  cursor: pointer;\n  opacity: 0.8;\n\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\n// export const EditBtn = styled.button`\n//   width: 30px;\n//   height: 30px;\n//   display: flex;\n//   align-items: center;\n//   border: 2px solid #3e7e80;\n//   box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n//   border-radius: 50%;\n//   cursor: pointer;\n//   opacity: 0.8;\n\n//   background-color: #3e7e80;\n\n//   &:hover {\n//     opacity: 1;\n//   }\n// `;","// import { toast } from 'react-toastify';\n// import { useEffect, useState} from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n\n// import { getLoading, getError, getVisibleContacts } from 'redux/selectors';\n// import { deleteContact, fetchContacts, editContact } from 'redux/operations';\n\n// import {\n//   ListOfContact,\n//   Items,\n//   DeleteButton,\n//   EditBtn,\n// } from './ContactsList.styled';\n\n// const ContactsList = () => {\n//   const dispatch = useDispatch();\n//   const isLoading = useSelector(getLoading);\n//   const error = useSelector(getError);\n//   const [editingContact, setEditingContact] = useState(null);\n//   const [isEditing, setIsEditing] = useState(false);\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   useEffect(() => {\n//     if (!isEditing) {\n//       dispatch(fetchContacts());\n//     }\n//   }, [dispatch, isEditing]);\n\n//   const visibleContacts = useSelector(getVisibleContacts);\n\n//   const handleDelete = contactId => {\n//     const confirmation = window.confirm('Are you want to delete this contact?');\n//     if (confirmation) {\n//       dispatch(deleteContact(contactId));\n//       toast.error('One contact has been deleted');\n//     }\n//   };\n\n//   const handleEdit = contact => {\n//     setEditingContact(contact);\n//     setIsEditing(true);\n//   };\n\n//   const handleSave = editedContact => {\n//     dispatch(editContact(editedContact));\n//     toast.success(`Contact edit successfully`);\n//     setIsEditing(false);\n//   };\n\n//   return (\n//     <ListOfContact>\n//       {isLoading && !error && <b>Loading...</b>}\n//       {visibleContacts.map(({ id, name, number }) => (\n//         <Items key={id}>\n//           {isEditing && editingContact?.id === id ? (\n//             <>\n//               <input\n//                 type=\"text\"\n//                 value={editingContact.name}\n//                 onChange={e =>\n//                   setEditingContact({\n//                     ...editingContact,\n//                     name: e.target.value,\n//                   })\n//                 }\n//               />\n//               <input\n//                 type=\"text\"\n//                 value={editingContact.number}\n//                 onChange={e =>\n//                   setEditingContact({\n//                     ...editingContact,\n//                     number: e.target.value,\n//                   })\n//                 }\n//               />\n//             </>\n//           ) : (\n//             <>\n//               {name}: {number}\n//             </>\n//           )}\n//           <div>\n//             {isEditing && editingContact?.id === id ? (\n//               <EditBtn onClick={() => handleSave(editingContact)}>\n//               </EditBtn>\n//             ) : (\n//               <EditBtn onClick={() => handleEdit({ id, name, number })}>\n//               </EditBtn>\n//             )}\n//             <DeleteButton type=\"button\" onClick={() => handleDelete(id)}>\n//             </DeleteButton>\n//           </div>\n//         </Items>\n//       ))}\n//     </ListOfContact>\n//   );\n// };\n\n// export default ContactsList;\n\n\nimport { toast } from 'react-toastify';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getLoading, getError } from 'redux/selectors';\nimport { deleteContact, fetchContacts } from 'redux/operations';\nimport { getVisibleContacts } from 'redux/selectors';\n\nimport { ListOfContact, Items, ItemButton } from './ContactsList.styled';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n    toast.error('One contact has been deleted');\n  };\n\n  return (\n    <ListOfContact>\n      {isLoading && !error && <b>Loading...</b>}\n      {visibleContacts.map(({ id, name, number }) => (\n        <Items key={id}>\n          {name}:<br /> {number}\n          <ItemButton type=\"button\" onClick={() => handleDelete(id)}>\n            Delete\n          </ItemButton>\n        </Items>\n      ))}\n    </ListOfContact>\n  );\n};\n\nexport default ContactsList;","import styled from '@emotion/styled';\n\nexport const FilterBox = styled.div`\n  width: 100%;\n  \n`;\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 4px;\n  border: none;\n  border-radius: 3px;\n  outline: none;\n  color: #FFF8DC;\n  background-color: #2F4F4F;\n  font-size: 20px;\n  font-family: inherit;\n`;","import { useDispatch } from 'react-redux';\n\nimport { getContactsFilter } from 'redux/filterSlice';\nimport {FilterBox ,FilterLabel, FilterInput } from './Filter.styled';\n\nconst FilterContacts = () => {\n  const changeFilter = e => {\n    dispatch(getContactsFilter(e.currentTarget.value.toLowerCase()));\n  };\n\n  const dispatch = useDispatch();\n   return (\n    <FilterBox>\n      <FilterLabel>\n        <FilterInput\n          type=\"text\"\n          onChange={changeFilter}\n          placeholder=\"Find contacts by name\"\n        />\n      </FilterLabel>\n    </FilterBox>\n  );\n};\n\nexport default FilterContacts;\n","import styled from '@emotion/styled';\n\nexport const PhoneForm = styled.form`\n   width: 400px;\n  display: inline-flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 20px;\n   border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(2px);\n  &:hover,\n  &:focus {\n    box-shadow: 1px 1px 10px 10px #696969;\n  }\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 20px;\n`;\n\nexport const FormInput = styled.input`\n  padding: 4px;\n  border: none;\n  border-radius: 3px;\n  outline: none;\n  color: #FFF8DC;\n  background-color: #2F4F4F;\n  font-size: 20px;\n  font-family: inherit;\n`;\n\nexport const FormButton = styled.button`\n  padding: 5px 45px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n  background-color: #A0522D;\n  font-weight: 700;\n  font-size: 15px;\n  color: currentColor;\n  &:hover {\n    background-color: #8B4513;\n  }\n`;","// import { toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// import { useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from 'redux/operations';\n// import {\n//   PhoneForm,\n//   FormLabel,\n//   FormInput,\n//   FormButton,\n// } from './PhoneForm.styled';\n// import { getContacts } from 'redux/selectors';\n\n// const Form = () => {\n//   const [name, setName] = useState('');\n\n//   const [number, setNumber] = useState('');\n\n//   const dispatch = useDispatch();\n\n//   const handelChange = e => {\n//     const { name, value } = e.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n\n//       default:\n//         break;\n//     }\n//   };\n\n//   const contacts = useSelector(getContacts);\n//   const handelSubmit = e => {\n//     e.preventDefault();\n//     const checkName = contacts.find(\n//       contact => contact.name.toLowerCase() === name.toLowerCase()\n//     );\n//     if (checkName) {\n//       toast.error(`${name} is already in contacts`);\n//       return;\n//     }\n\n//     const data = { name, number };\n//     dispatch(addContact(data));\n//     toast.success(`Contact ${name} added successfully`);\n\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//       <PhoneForm onSubmit={handelSubmit}>\n//         <FormLabel>\n//           Name\n//           <FormInput\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             value={name}\n//             onChange={handelChange}\n//           />\n//         </FormLabel>\n//         <FormLabel>\n//           Number\n//           <FormInput\n//             type=\"tel\"\n//             name=\"phone\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//             value={number}\n//             onChange={handelChange}\n//           />\n//         </FormLabel>\n//         <FormButton type=\"submit\">Add Contact</FormButton>\n//       </PhoneForm>\n//   );\n// };\n\n// export default Form;\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport {\n  PhoneForm,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './PhoneForm.styled';\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handelChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const contacts = useSelector(getContacts);\n  const handelSubmit = e => {\n    e.preventDefault();\n    const checkName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (checkName) {\n      toast.error(`${name} is already in contacts`);\n      return;\n    }\n\n    const data = { name, number };\n    dispatch(addContact(data));\n    toast.success(`Contact ${name} added successfully`);\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n      <PhoneForm onSubmit={handelSubmit}>\n        <FormLabel>\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handelChange}\n          />\n        </FormLabel>\n        <FormLabel>\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handelChange}\n          />\n        </FormLabel>\n        <FormButton type=\"submit\">Add Contact</FormButton>\n      </PhoneForm>\n  );\n};\n\nexport default Form;\n","import { PhonebookSection, FilterContainer } from './Phonebook.styled';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport FilterContacts from 'components/Filter/Filter';\nimport Form from 'components/PhoneForm/PhoneForm';\n\nconst Phonebook = () => {\n  return (\n    <PhonebookSection>\n      <Form />\n      <FilterContainer>\n        <FilterContacts />\n        <ContactsList />\n      </FilterContainer>\n    </PhonebookSection>\n  );\n};\n\nexport default Phonebook;\n"],"names":["PhonebookSection","styled","FilterContainer","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getContacts","state","contacts","items","getLoading","isLoading","getError","error","getVisibleContacts","filter","toLowerCase","includes","ListOfContact","Items","ItemButton","dispatch","useDispatch","useSelector","useEffect","fetchContacts","visibleContacts","id","number","type","onClick","contactId","deleteContact","toast","FilterBox","FilterLabel","FilterInput","onChange","e","getContactsFilter","currentTarget","placeholder","PhoneForm","FormLabel","FormInput","FormButton","useState","setName","setNumber","handelChange","target","onSubmit","preventDefault","contact","data","addContact","pattern","title","required","Filter"],"sourceRoot":""}